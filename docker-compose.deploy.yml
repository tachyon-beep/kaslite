# Docker Compose for Morphogenetic Model Deployment
# Includes inference server, monitoring, and model registry

version: '3.8'

services:
  # MLflow Tracking Server
  mlflow-server:
    image: python:3.11-slim
    container_name: mlflow-tracking
    ports:
      - "5000:5000"
    volumes:
      - mlflow-data:/mlruns
      - mlflow-artifacts:/artifacts
    environment:
      - MLFLOW_BACKEND_STORE_URI=sqlite:////mlruns/mlflow.db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/artifacts
    command: >
      bash -c "pip install mlflow && 
               mlflow server 
               --backend-store-uri sqlite:////mlruns/mlflow.db 
               --default-artifact-root /artifacts 
               --host 0.0.0.0 
               --port 5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - morpho-net

  # Inference Server
  inference-server:
    build:
      context: .
      dockerfile: Dockerfile.inference
    container_name: morpho-inference
    ports:
      - "8080:8080"
    volumes:
      - mlflow-data:/app/mlruns:ro
      - model-cache:/app/models
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow-server:5000
      - PROMETHEUS_MULTIPROC_DIR=/tmp
      - LOG_LEVEL=info
    depends_on:
      mlflow-server:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - morpho-net

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: morpho-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules.yml:/etc/prometheus/rules.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - morpho-net

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: morpho-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=kaslite
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - morpho-net

  # Alertmanager for alerts
  alertmanager:
    image: prom/alertmanager:latest
    container_name: morpho-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - morpho-net

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: morpho-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - morpho-net

  # Nginx load balancer/proxy
  nginx:
    image: nginx:alpine
    container_name: morpho-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - inference-server
    networks:
      - morpho-net

volumes:
  mlflow-data:
    driver: local
  mlflow-artifacts:
    driver: local
  model-cache:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  alertmanager-data:
    driver: local
  redis-data:
    driver: local
  nginx-logs:
    driver: local

networks:
  morpho-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
