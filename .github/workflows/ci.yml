name: "Morphogenetic Engine CI"

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Nightly sweep at 2 AM UTC
    - cron: "0 2 * * *"

jobs:
  lint-and-test:
    name: "Code Quality & Tests"
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Set up Python"
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "pip"

      - name: "Install dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: "Install package in development mode"
        run: pip install -e .

      - name: "Run Black formatting check"
        run: black --check --diff morphogenetic_engine/ scripts/ tests/

      - name: "Run pylint"
        run: pylint morphogenetic_engine/ scripts/
        continue-on-error: true # Don't fail CI for pylint warnings

      - name: "Run type checking with mypy"
        run: mypy morphogenetic_engine/
        continue-on-error: true # Don't fail CI for type warnings

      - name: "Run unit tests"
        run: |
          pytest tests/ -v --tb=short --maxfail=5

      - name: "Test CLI interfaces"
        run: |
          # Test sweep CLI help
          python -m morphogenetic_engine.cli.sweep --help
          # Test reports CLI help  
          python -m morphogenetic_engine.cli.reports --help

  quick-validation-sweep:
    name: "Quick Validation Sweep"
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'pull_request'

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Set up Python"
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "pip"

      - name: "Install dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: "Install package"
        run: pip install -e .

      - name: "Generate test data"
        run: |
          python scripts/generate_data.py --output data/test_spirals.npz --problem spirals --samples 500

      - name: "Run quick validation sweep"
        run: |
          python -m morphogenetic_engine.cli.sweep quick --problem spirals --trials 4
        timeout-minutes: 15

      - name: "Check results"
        run: |
          # Verify results were generated
          ls -la results/sweeps/
          echo "✅ Quick validation sweep completed successfully"

  nightly-comprehensive-sweep:
    name: "Nightly Comprehensive Sweep"
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Set up Python"
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "pip"

      - name: "Install dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: "Install package"
        run: pip install -e .

      - name: "Generate test datasets"
        run: |
          python scripts/generate_data.py --output data/spirals.npz --problem spirals --samples 2000
          python scripts/generate_data.py --output data/moons.npz --problem moons --samples 2000

      - name: "Run comprehensive grid search"
        run: |
          python -m morphogenetic_engine.cli.sweep grid --config examples/quick_sweep.yaml --parallel 2
        timeout-minutes: 60

      - name: "Run Bayesian optimization (if Optuna available)"
        run: |
          python -m morphogenetic_engine.cli.sweep bayesian --config examples/bayesian_sweep.yaml --trials 10 || echo "Optuna not available, skipping Bayesian sweep"
        timeout-minutes: 45
        continue-on-error: true

      - name: "Generate reports"
        run: |
          # Find the most recent sweep directory
          SWEEP_DIR=$(ls -1t results/sweeps/ | head -1)
          if [ -n "$SWEEP_DIR" ]; then
            echo "Generating reports for sweep: $SWEEP_DIR"
            python -m morphogenetic_engine.cli.reports summary --sweep-dir "results/sweeps/$SWEEP_DIR"
            python -m morphogenetic_engine.cli.reports analysis --sweep-dir "results/sweeps/$SWEEP_DIR"
          else
            echo "No sweep results found"
          fi

      - name: "Upload sweep results"
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: nightly-sweep-results
          path: |
            results/sweeps/
            results/*.log
          retention-days: 30

  performance-regression-check:
    name: "Performance Regression Check"
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'pull_request'

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Set up Python"
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "pip"

      - name: "Install dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: "Install package"
        run: pip install -e .

      - name: "Run performance baseline test"
        run: |
          # Run a single deterministic experiment for performance comparison
          python scripts/run_morphogenetic_experiment.py \
            --problem_type spirals \
            --n_samples 1000 \
            --warm_up_epochs 20 \
            --adaptation_epochs 30 \
            --hidden_dim 128 \
            --num_layers 8 \
            --lr 0.001 \
            --seed 42 \
            --device cpu
        timeout-minutes: 10

      - name: "Check performance metrics"
        run: |
          # This would ideally compare against historical performance baselines
          # For now, just verify the experiment completed successfully
          echo "✅ Performance regression check completed"
